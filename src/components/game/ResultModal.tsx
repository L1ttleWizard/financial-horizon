// src/components/game/ResultModal.tsx
'use client';
import { useDispatch } from 'react-redux';
import { closeResultModal } from '@/store/slices/gameSlice';
import type { Choice } from '@/data/gameEvents';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
type ChoiceEffects = Choice['effects'];

interface ResultModalProps {
  result: {
    outcomeText: string;
    learningPoint: string;
    effects: ChoiceEffects; // <-- –ü—Ä–∏–Ω–∏–º–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–∞–∫ prop
  };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "—Ç–∞–±–ª–µ—Ç–∫–∏" —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
const EffectPill = ({ label, value, icon }: { label: string, value: number, icon: string }) => {
    if (value === 0) return null; // –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω—É–ª–µ–≤–æ–µ
    
    const isPositive = value > 0;
    const colorClasses = isPositive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800';
    const sign = isPositive ? '+' : '';

    return (
        <div className={`flex items-center gap-2 rounded-full px-3 py-1 text-sm font-bold ${colorClasses}`}>
            <span>{icon}</span>
            <span>{label}:</span>
            <span>{sign}{value}</span>
        </div>
    )
}


export function ResultModal({ result }: ResultModalProps) {
    const dispatch = useDispatch();

    return (
        <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-2xl shadow-2xl p-6 sm:p-8 max-w-2xl w-full flex flex-col items-center text-center animate-fade-in-up">
                <h2 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-4">–í–∞—à –≤—ã–±–æ—Ä:</h2>
                <p className="text-gray-700 text-lg mb-6">{result.outcomeText}</p>

                {/* –ù–û–í–´–ô –ë–õ–û–ö –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô */}
                <div className="flex flex-wrap justify-center gap-3 mb-6">
                    {result.effects.balance && <EffectPill label="–ë–∞–ª–∞–Ω—Å" value={result.effects.balance} icon="üí∞" />}
                    {result.effects.mood && <EffectPill label="–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ" value={result.effects.mood} icon="‚ù§Ô∏è" />}
                    {result.effects.savings && <EffectPill label="–°–±–µ—Ä–µ–∂–µ–Ω–∏—è" value={result.effects.savings} icon="üìà" />}
                    {result.effects.debt && <EffectPill label="–î–æ–ª–≥" value={result.effects.debt} icon="üí≥" />}
                </div>

                <div className="w-full bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-r-lg mb-8">
                    <h3 className="font-bold text-yellow-800">üí° –ß—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å:</h3>
                    <p className="text-yellow-700">{result.learningPoint}</p>
                </div>

                <button
                    onClick={() => dispatch(closeResultModal())}
                    className="w-full sm:w-auto bg-blue-600 text-white font-bold py-3 px-8 rounded-lg shadow-lg hover:bg-blue-700 transition-transform transform hover:scale-105"
                >
                    –ü–æ–Ω—è—Ç–Ω–æ, –¥–∞–ª—å—à–µ!
                </button>
            </div>
        </div>
    );
}
// src/app/api/generate-image/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenAI } from '@google/genai';

export async function GET(req: NextRequest) {
  const { searchParams } = new URL(req.url);
  const prompt = searchParams.get('prompt');

  if (!prompt) {
    return NextResponse.json({ error: 'Prompt is required' }, { status: 400 });
  }

  // The GoogleGenAI constructor automatically looks for GEMINI_API_KEY
  // in the environment variables.
  if (!process.env.GEMINI_API_KEY) {
    return NextResponse.json({ error: 'GEMINI_API_KEY is not configured' }, { status: 500 });
  }

  try {
    const ai = new GoogleGenAI({}); // API key is picked from process.env

    const response = await ai.models.generateImages({
      model: 'imagen-3.0-generate-002', // Using the newer model from your example
      prompt: `A minimalist vector art logo for a financial game event. The theme is: "${prompt}". Use a clean, abstract style.`,
      config: {
        numberOfImages: 1,
        aspectRatio: '1:1',
        personGeneration: 'dont_allow', // Do not generate people
      },
    });

    if (response?.generatedImages && response.generatedImages.length > 0) {
      // Using the correct path to image data from your example
      const imageBytes = response.generatedImages[0].image.imageBytes;
      const imageUrl = `data:image/png;base64,${imageBytes}`;
      return NextResponse.json({ imageUrl });
    } else {
      throw new Error('No image was generated by the API.');
    }
  } catch (error) {
    console.error('Error generating image with Gemini API:', error);
    const fallbackUrl = `https://placehold.co/600x400/EEE/31343C.svg?text=Error+Generating+Image`;
    return NextResponse.json({ imageUrl: fallbackUrl }, { status: 500 });
  }
}

// src/app/savings/page.tsx
"use client";
import { useState } from "react";
import Link from "next/link";
import { useAppSelector, useAppDispatch } from "@/store/hooks";
import { openDeposit } from "@/store/slices/gameSlice";
import { BankOffer } from "@/data/bankOffers";
import { ActiveDepositCard } from "@/components/game/ActiveDepositCard";
import { BankOfferCard } from "@/components/game/BankOfferCard";
import { OpenDepositModal } from "@/components/game/OpenDepositModal";
import { PropertyInvestmentCard } from "@/components/game/PropertyInvestmentCard";
import { formatCurrency } from "@/lib/format";

export default function SavingsPage() {
  const dispatch = useAppDispatch();

  // 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º useAppSelector –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ–≥–æ –Ω—É–∂–Ω–æ–≥–æ –∏–∑ state
  const { activeDeposits, propertyInvestments, availableOffers, turn, balance, debt, savings, areOffersInitialized } =
    useAppSelector((state) => state.game);



  const [selectedOffer, setSelectedOffer] = useState<BankOffer | null>(null);

  const handleConfirmDeposit = (payload: {
    offer: BankOffer;
    amount: number;
    term: number;
  }) => {
    dispatch(openDeposit(payload));
    setSelectedOffer(null);
  };

  return (
    <main className="min-h-screen p-4 sm:p-8 text-gray-600">
      <div className="max-w-7xl mx-auto">
        <header className="mb-8 text-center">
          <h1 className="text-3xl sm:text-5xl font-bold text-gray-800">
            –°–±–µ—Ä–µ–∂–µ–Ω–∏—è
          </h1>
          <p className="text-gray-600 mt-2">
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏–º–∏ –≤–∫–ª–∞–¥–∞–º–∏ –∏ –ø—Ä–∏—É–º–Ω–æ–∂–∞–π—Ç–µ –∫–∞–ø–∏—Ç–∞–ª.
          </p>
        </header>

        {/* –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è—Ö */}
        <div className="bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg p-6 text-white mb-8">
          <h2 className="text-2xl font-bold mb-4">–í–∞—à–∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è</h2>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <p className="text-blue-100">–û–±—â–∞—è —Å—É–º–º–∞</p>
              <p className="text-3xl font-bold">‚ÇΩ{formatCurrency(savings)}</p>
            </div>
            <div>
              <p className="text-blue-100">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –≤–∫–ª–∞–¥—ã</p>
              <p className="text-xl font-semibold">
                ‚ÇΩ{formatCurrency((activeDeposits || []).reduce((sum, dep) => sum + dep.amount, 0))}
              </p>
            </div>
            <div>
              <p className="text-blue-100">–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</p>
              <p className="text-xl font-semibold">
                ‚ÇΩ{formatCurrency((propertyInvestments || []).reduce((sum, inv) => sum + inv.amount, 0))}
              </p>
            </div>
            <div>
              <p className="text-blue-100">–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</p>
              <p className="text-xl font-semibold">‚ÇΩ{formatCurrency(balance)}</p>
            </div>
          </div>
        </div>

        {/* –°–µ–∫—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≤–∫–ª–∞–¥–æ–≤ */}
        <section className="mb-12">
          <h2 className="text-3xl font-bold mb-4">üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –≤–∫–ª–∞–¥—ã</h2>
          {(activeDeposits || []).length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 bgw">
              {(activeDeposits || []).map((deposit) => (
                <ActiveDepositCard
                  key={deposit.id}
                  deposit={deposit}
                  currentTurn={turn}
                />
              ))}
            </div>
          ) : (
            <div className="text-center py-10 rounded-xl shadow bg-white">
              <p className="text-gray-500">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–≤.</p>
            </div>
          )}
        </section>

        {/* –°–µ–∫—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å */}
        <section className="mb-12">
          <h2 className="text-3xl font-bold mb-4">üè† –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å</h2>
          {(propertyInvestments || []).length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {(propertyInvestments || []).map((investment) => (
                <PropertyInvestmentCard
                  key={investment.id}
                  investment={investment}
                  currentTurn={turn}
                />
              ))}
            </div>
          ) : (
            <div className="text-center py-10 bg-white rounded-xl shadow">
              <p className="text-gray-500">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å. –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö –∏–≥—Ä—ã!</p>
            </div>
          )}
        </section>

        {/* –°–µ–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π */}
        <section>
          <h2 className="text-3xl font-bold mb-4">–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</h2>
          {!areOffersInitialized || availableOffers.length === 0 ? (
            <div className="text-center py-10 bg-white rounded-xl shadow">
              <p className="text-gray-500">
                {!areOffersInitialized ? "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π..." : "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –±–∞–Ω–∫–æ–≤."}
              </p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 ">
              {availableOffers.map((offer) => (
                <BankOfferCard
                  key={offer.id}
                  offer={offer}
                  onSelect={() => setSelectedOffer(offer)}
                />
              ))}
            </div>
          )}
        </section>

        <div className="mt-12 text-center">
          <Link
            href="/"
            className="bg-blue-600 text-white font-bold py-3 px-8 rounded-lg"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–µ
          </Link>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      {selectedOffer && (
        <OpenDepositModal
          offer={selectedOffer}
          balance={balance}
          debt={debt}
          onClose={() => setSelectedOffer(null)}
          onConfirm={handleConfirmDeposit}
        />
      )}
    </main>
  );
}
